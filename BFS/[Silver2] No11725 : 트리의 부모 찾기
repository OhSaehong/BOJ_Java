import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {// [Silver2] No11725 : 트리의 부모 찾기
    static ArrayList<Integer>[] arr;
    static int[] ans;
    static boolean[] check;
    static Queue<Integer> queue = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int num = Integer.parseInt(br.readLine());
        arr = new ArrayList[num + 1];
        ans = new int[num + 1];
        check = new boolean[num + 1];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < num - 1; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            arr[x].add(y);
            arr[y].add(x);
        }

        queue.add(1);
        bfs();
        ans[1] = 1;

        for (int i = 2; i < ans.length; i++) {
            System.out.println(ans[i]);
        }
    }

    public static void bfs() {

        while (!queue.isEmpty()) {
            int parent = queue.poll();
            check[parent] = true;
            for (int a : arr[parent]) {
                if (ans[a] == 0) {
                    ans[a] = parent;
                    if (!check[a]) {
                        queue.add(a);
                    }
                }
            }
        }
    }
}
