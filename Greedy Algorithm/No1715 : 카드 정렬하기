import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Main {// no1715 카드 정렬하기
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int nums = Integer.parseInt(br.readLine());
		int[] arr = new int[nums];

		for (int i = 0; i < arr.length; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}

		Arrays.sort(arr);
		Queue<Integer> min = new LinkedList<>();
		long ans = 0;
		int min1 = 0;
		int min2 = 0;
		int cnt = 0;
		boolean chk = false;
		
		while (cnt != arr.length - 1 || !min.isEmpty()) {
			
			if (min.isEmpty() || (!chk && min.peek() > arr[cnt])) {
				min1 = arr[cnt];
				cnt++;// 다음 arr로 비교해야함
			} else {
				min1 = min.poll();
			}
			if (cnt>=arr.length) {
				chk = true;
			}
			
			System.out.println(cnt);
			System.out.println(arr.length);
			System.out.println(chk);
			if (min.isEmpty() || (!chk && min.peek() > arr[cnt])) {
				System.out.println(arr[cnt]);
				min2 = arr[cnt];
				cnt++;// 다음 arr로 비교해야함
			} else {
				min2 = min.poll();
			}
			
			if (cnt>=arr.length) {
				chk = true;
			}
			ans += min1 + min2;
			min.add(min1 + min2);

		}
		
		System.out.println(ans);

	}
}
