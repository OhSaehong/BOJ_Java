import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

public class No1946 {
    public static void main(String[] args) throws IOException {//No1946 신입사원

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));


        Scanner sc = new Scanner(System.in);
        int testCase = Integer.parseInt(br.readLine());

        for (int i = 0; i < testCase; i++) {
            int rows = Integer.parseInt(br.readLine());
            int[] students = new int[rows];

            for (int j = 0; j < rows; j++) {
                StringTokenizer st = new StringTokenizer(br.readLine());
                int tmp1 = Integer.parseInt(st.nextToken()) - 1;
                students[tmp1] = Integer.parseInt(st.nextToken());
            }

            ArrayList<Integer> arrList = new ArrayList<>();
            for (int j = 0; j < students.length; j++) {
                if (arrList.isEmpty() || arrList.get(arrList.size() - 1) > students[j]) {
                    arrList.add(students[j]);
                }
            }
            System.out.println(arrList.size());
        }


    }
}


//    Greedy Algorithm과 정렬이 섞여있는 문제이다.
//        그 중에서도 중점을 두고 푼 부분은 정렬이었는데,
//        정작 문제의 key point는 "두 성적 순위는 모두 1위부터 N위까지 동석차 없이 결정된다"라는 문장에서 힌트를 얻어서
//        두 성적 중 하나의 순위를 1차원 배열의 Index로, 다른 하나의 순위를 Value로 놓고 푸는 것이다.
//        그렇게만 한다면 별도로 정렬을 할 필요없이 1차원 배열에 값을 넣으면서 자동으로 Index별로 풀수 있으니 말이다.
//        정렬을 했을 때와 그렇지 않을 때의 시간차이가 약 3배이상 났다. 문제에서 주어지는 내용으로 어떻게하면 효율적으로 알고리즘을 짤수 있는지 고민해야겠다.
