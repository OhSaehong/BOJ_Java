import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

public class Main {
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int executeCnt = Integer.parseInt(br.readLine());

        Stack<Object> stack = new Stack<Object>();

        while (executeCnt != 0) {

            Object[] tmp = br.readLine().split(" ");

            if (tmp[0].equals("push")) {
                stack.push(tmp[1]);
            } else if (tmp[0].equals("pop")) {
                if (stack.isEmpty()) System.out.println("-1");
                else System.out.println(stack.pop());
            } else if (tmp[0].equals("size")) {
                System.out.println(stack.size());
            } else if (tmp[0].equals("empty")) {
                if (stack.isEmpty()) System.out.println("1");
                else System.out.println("0");
            } else if (tmp[0].equals("top")) {
                if (stack.isEmpty()) System.out.println("-1");
                else System.out.println(stack.peek());
            }
            executeCnt--;
        }
    }
}

// Stack의 기본 개념에대해 쉽게 파악할 수 있는 문제이다.
// Stack의 특징 (coding-factory.tistory.com 참조)
//1. 먼저 들어간 자료가 나중에 나옴 LIFO(Last In First Out) 구조
//2. 시스템 해킹에서 버퍼오버플로우 취약점을 이용한 공격을 할 때 스택 메모리의 영역에서 함
//3. 인터럽트처리, 수식의 계산, 서브루틴의 복귀 번지 저장 등에 쓰임
//4. 그래프의 깊이 우선 탐색(DFS)에서 사용
////5. 재귀적(Recursion) 함수를 호출 할 때 사용
