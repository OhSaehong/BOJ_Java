import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

public class no1662 {// no1662 압축

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] str = br.readLine().split("");
		Stack<String> stack = new Stack();

		long cnt = 0;
		long cal = 0;
		for (int i = 0; i < str.length; i++) {
			cnt++;
			if (str[i].equals("(")) {
				if (cnt - 2 > 0) {
					stack.push(String.valueOf(cnt - 2));
				}
				stack.push(str[i - 1]);
				stack.push("(");
				cnt = 0;
			} else if (str[i].equals(")")) {
				if (cnt != 1) {
					cal = cnt - 1;
				} else {
					if (isLong(stack.peek())) {
						cal = Long.parseLong(stack.pop());
					} else {
						cal = 0;
					}
				}

				while (!stack.isEmpty() && !stack.peek().equals("(")) {
					cal += Long.parseLong(stack.pop());
				}

				stack.pop();
				cal = cal * Long.parseLong(stack.pop());
				while (!stack.isEmpty() && !stack.peek().equals("(")) {
					cal += Long.parseLong(stack.pop());
				}

				stack.push(String.valueOf(cal));
				cnt = 0;
			} else if (i == str.length - 1) {
				stack.push(String.valueOf(cnt));
			}

		}
		cal = 0;

		for (String string : stack) {
			cal += Long.parseLong(string);
		}
		System.out.println(cal);

	}

	public static boolean isLong(String str) {
		try {
			Long.parseLong(str);
			return true;
		} catch (Exception e) {
			return false;
		}

	}
}

//3시간 넘게 메달려서 겨우겨우 풀었으나..
//너무 별볼일없게 풀어 화가난다.
//stack이나 재귀함수를 이용하여 푼 사람들이 많았는데
//나는 stack을 사용하긴하였으나 반쪽보다 못하게 사용한것같다.
//stack 를 하나만 구현해서 사용하려고 하지말고 좀더 시야를 확장해서 생각해보아야겠다.
// ctritical test case : 9(8()7(6()5(4()))123)
