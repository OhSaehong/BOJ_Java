import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {// no2304 : 창고 다각형

	public static void main(String[] args) throws NumberFormatException, IOException {

		Scanner sc = new Scanner(System.in);

		int stickCnt = Integer.parseInt(sc.nextLine());

		int[][] stickArr = new int[stickCnt][2];

		int max = 0;
		int maxLeft = 0;
		int maxRight = 0;

		for (int i = 0; i < stickCnt; i++) {
			stickArr[i][0] = Integer.parseInt(sc.next());
			stickArr[i][1] = Integer.parseInt(sc.next());
		}

		Arrays.sort(stickArr, new Comparator<int[]>() {
			public int compare(int[] o1, int[] o2) {
				return o1[0] - o2[0];
			}

		});

		for (int i = 0; i < stickCnt; i++) {
			if (stickArr[i][1] > max) {
				max = stickArr[i][1];// max값
				maxLeft = i;// max값의 left arr 위치
				maxRight = i;// max값의 right arr 위치
				// 정렬을 한상태에서 max를 찾기 때문에 left는 최초의 max라 그대로 두면되고, right만 다시 찾아줌
			} else if (stickArr[i][1] == max) {
				maxRight = i;
			}
		}

		int ans = 0;
		int peek = 0;

		for (int i = 0; i < maxLeft; i++) {
			if (stickArr[i][1] > peek) {
				peek = stickArr[i][1];
			}
			ans += peek * (stickArr[i + 1][0] - stickArr[i][0]);
		}
		peek = 0;

		for (int i = stickArr.length - 1; i > maxRight; i--) {
			if (stickArr[i][1] > peek) {
				peek = stickArr[i][1];
			}
			ans += peek * (stickArr[i][0] - stickArr[i - 1][0]);
		}

		ans += max * (stickArr[maxRight][0] - stickArr[maxLeft][0] + 1);

		System.out.println(ans);

	}
}

//2차원 배열의 정렬을 사용한 문제이다.
//2차원 배열을 정렬 하기 위해서는 Comparator 클래스를 사용해서 compare 함수를 재정의 해주어야한다.
//compare method를 첫번째 인자로 비교할수 있도록 재정의하였다.
//첫번째 인자가 같은 경우에 두번째 인자를 비교하는 조건을 포함하고싶다면, 
//if(o1[0] == o2[0])
//					return o1[1]-o2[1];
//				else
//          return o1[0]-o2[0];
// 과 같이 수정할 수 있겠다.
